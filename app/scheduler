import datetime
import requests
import dateutil.parser as parser
from app.config import attn_url, secret_key
from bson.objectid import ObjectId
from app.util import serialize_doc
from app import mongo
import numpy as np


def checkin_score():
    # Finding random user who have the below condition
    users = mongo.db.users.find_one({"cron_checkin": False}, {'username': 1, 'user_Id': 1})
    if users is not None:
        ID_ = users['user_Id']
        print(ID_)
        Id = str(users['_id'])
        print(Id)

        # update the condition to true for the particular user
        docs = mongo.db.users.update_one({
            "cron_checkin": False
        }, {
            "$set": {
                "cron_checkin": True
            }}, upsert=False)

        URL = attn_url
        # generating current month and year
        today = datetime.datetime.now()
        month = str(today.month)
        year = str(today.year)

        # passing parameters in payload to call the api
        payload = {"action": "month_attendance", "userid": ID_, "secret_key": secret_key,
                   "month": month, "year": year}
        response = requests.post(url=URL, json=payload)
        data = response.json()
        attn_data = data['data']['attendance']

        # getting the dates where user was present and store it in date_list
        date_list = list()
        for data in attn_data:
            attn = (data['full_date'])
            if len(data['total_time']) > 0:
                date_list.append(attn)
        print(date_list)
        # Taking the length of the date_list to find number of days user was present
        no_days_present = len(date_list)
        print('No of days present' + ' :' + str(no_days_present))

        # converting of ISO format of first date
        first = date_list[0]
        print(first)
        fri_date = str(first)
        first_date = parser.parse(fri_date)
        first_date_iso = first_date.isoformat()

        # converting of ISO format of second date
        last = date_list[-1]
        print(last)
        lst_date = str(last)
        last_date = parser.parse(lst_date)
        last_date_iso = last_date.isoformat()

        F = datetime.datetime.strptime(first_date_iso, "%Y-%m-%dT%H:%M:%S")
        print(F)
        L = datetime.datetime.strptime(last_date_iso, "%Y-%m-%dT%H:%M:%S")
        print(L)

        # Finding the days on which check_in is done
        reports = mongo.db.reports.find({
            "user": Id,
            "type": "daily",
            "created_at": {
                "$gte": F,
                "$lte": L
            }
        })
        reports = [serialize_doc(report) for report in reports]

        # storing just the check-in dates from reports in no_of_checking list
        no_of_checking = list()
        for data in reports:
            no_of_checking.append(data['created_at'])

        # Taking the length of the list and store it in no_of_checking_days list
        list_checkin = no_of_checking
        print(list_checkin)
        no_of_checking_days = len(list_checkin)
        print('No of days checkin done' + ' :' + str(no_of_checking_days))

        # Calculating the overall_score for checkin of a user
        checkin_scr = no_of_checking_days / no_days_present * 100
        print('overall_score' + ' :' + str(checkin_scr))
        ret = mongo.db.users.update({
            "_id": ObjectId(Id)
        }, {
            "$set": {
                "Checkin_rating": checkin_scr,
            }
        })
    else:
        return 'Job done'


def overall_reviewes():
    users = mongo.db.reports.find({"cron_checkin":True})
    users = [serialize_doc(doc) for doc in users]
    for detail in users:
        id=detail['user']
        print(id)
        docs = mongo.db.reports.update({
        "user":str(id)
        }, {
        "$set": {
           "cron_checkin": False
           }}, upsert=False)
        docs = mongo.db.reports.find({"user": str(id), "type": "weekly"})
        user = mongo.db.users.find_one({"_id": ObjectId(id)})
        weights = user['managers']
        all_weight = []
        for weg in weights:
            weight = weg['weight']
            all_weight.append(weight)
        print(all_weight)
        docs = [serialize_doc(doc) for doc in docs]
        print(docs)
        all_sum = []
        for detail in docs:
            for review in detail['review']:
                all_sum.append(review['rating'])

        print(all_sum)
        weighted_avg = np.average(all_sum, weights=all_weight,)
        print(weighted_avg)
        ret = mongo.db.users.update({
                "_id": ObjectId(id)
            }, {
                "$set": {
                    "Overall_rating": weighted_avg
                }
                })


# Function for reseting the cron values to FALSE
def update_croncheckin():
    docs = mongo.db.users.update({
        "cron_checkin": True
    }, {
        "$set": {
            "cron_checkin": False
        }}, upsert=False, multi=True)

    ret = mongo.db.reports.update({
        "cron_checkin": False
    }, {
        "$set": {
            "cron_checkin": True
        }}, upsert=False, multi=True)


#Function of recent_activity for checkin_missed and reviewed.
def recent_activity():
    users = mongo.db.reports.find({"type": "daily"})
    users = [serialize_doc(doc) for doc in users]
    # find user id
    for detail in users:
        ID = detail['user']
        today = datetime.datetime.today()
        last_day = today - datetime.timedelta(1)
        date_time = today - datetime.timedelta(1)
        time = date_time.strftime("%Y-%B-%A")
        date = date_time.strftime("%Y-%m-%d")

        # find reports checkin by user_id
        reports = mongo.db.reports.find({
            "user": str(ID),
            "type": "daily",
            "created_at": {
                "$gte": datetime.datetime(last_day.year, last_day.month, last_day.day),
                "$lte": datetime.datetime(today.year, today.month, today.day)
            }
        })
        reports = [serialize_doc(report) for report in reports]
        # if checkin not found update date in user profile
        if not reports:
            users = mongo.db.users.find_one({"_id": ObjectId(str(ID))}, {'username': 1, 'user_Id': 1})
            if users is not None:
                ID_ = users['user_Id']
                print(ID_)
                URL = attn_url
                # generating current month and year
                today = datetime.datetime.now()
                month = str(today.month)
                year = str(today.year)

                payload = {"action": "month_attendance", "userid": ID_, "secret_key": secret_key,
                           "month": month, "year": year}
                response = requests.post(url=URL, json=payload)
                data = response.json()
                attn_data = data['data']['attendance']

                # getting the dates where user was present and store it in date_list
                date_list = list()
                for data in attn_data:
                    attn = (data['full_date'])
                    if len(data['total_time']) > 0:
                        date_list.append(attn)
                print(date_list)
                if date not in date_list:
                    ret = mongo.db.users.update({
                        "_id": ObjectId(ID)},
                        {"$push": {"missed_checkin_dates": {
                            "date": date,
                        }}})
                    ret = mongo.db.recent_activity.update({
                        "user": str(ID)},
                        {"$push": {"missed_checkin": {
                            "checkin_message": time,
                            "created_at": datetime.datetime.now(),
                            "priority": 1
                        }}}, upsert=True)

def reviewed_activity():
    users = mongo.db.reports.find({"cron_recent_activity": False})
    users = [serialize_doc(doc) for doc in users]
    # find user id
    for detail in users:
        id = detail['user']
        # update cron  variable True
        docs = mongo.db.reports.update({
            "user": str(id)
        }, {
            "$set": {
                "cron_recent_activity": True
            }}, upsert=False)

        today = datetime.date.today()
        last_sunday = today - datetime.timedelta(days=(today.weekday() + 1))
        last_monday = today - datetime.timedelta(days=(today.weekday() + 8))
        # here find last week reports by user_id where review exists
        docs = mongo.db.reports.find({
            "user": str(id),
            "review": {'$exists': True},
            "created_at": {
                "$gte": datetime.datetime(last_monday.year, last_monday.month, last_monday.day),
                "$lte": datetime.datetime(last_sunday.year, last_sunday.month, last_sunday.day)
            }
        })
        docs = [serialize_doc(doc) for doc in docs]
        print(docs)
        manager_name = []
        for data in docs:
            for name in data['is_reviewed']:
                manager_name.append(name['username'])
        # check if docs are empty or not
        if not docs:
            return ("review not available")
        else:
            ret = mongo.db.recent_activity.update({
                "user": str(id)},
                {"$push": {
                    "report_reviewed": {
                        "created_at": datetime.datetime.now(),
                        "priority": 0,
                        "Message": "Your weekly report has been reviewed by "" " + str(manager_name)
                    }}}, upsert=True)



    
