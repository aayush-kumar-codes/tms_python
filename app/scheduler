import datetime
import requests
import dateutil.parser as parser
from app.config import attn_url, secret_key
from bson.objectid import ObjectId
from app.util import serialize_doc
from app import mongo
import numpy as np


def checkin_score():
    # Finding random user who have the below condition
    users = mongo.db.users.find_one({"cron_checkin": False}, {'username': 1, 'user_Id': 1})
    if users is not None:
        ID_ = users['user_Id']
        print(ID_)
        Id = str(users['_id'])
        print(Id)

        # update the condition to true for the particular user
        docs = mongo.db.users.update_one({
            "cron_checkin": False
        }, {
            "$set": {
                "cron_checkin": True
            }}, upsert=False)

        URL = attn_url
        # generating current month and year
        today = datetime.datetime.now()
        month = str(today.month)
        year = str(today.year)

        # passing parameters in payload to call the api
        payload = {"action": "month_attendance", "userid": ID_, "secret_key": secret_key,
                   "month": month, "year": year}
        response = requests.post(url=URL, json=payload)
        data = response.json()
        attn_data = data['data']['attendance']

        # getting the dates where user was present and store it in date_list
        date_list = list()
        for data in attn_data:
            attn = (data['full_date'])
            if len(data['total_time']) > 0:
                date_list.append(attn)

        # Taking the length of the date_list to find number of days user was present
        no_days_present = len(date_list)
        print('No of days present' + ' :' + str(no_days_present))

        # converting of ISO format of first date
        first = date_list[0]
        fri_date = str(first)
        first_date = parser.parse(fri_date)
        first_date_iso = first_date.isoformat()

        # converting of ISO format of second date
        last = date_list[-1]
        lst_date = str(last)
        last_date = parser.parse(lst_date)
        last_date_iso = last_date.isoformat()

        F = datetime.datetime.strptime(first_date_iso, "%Y-%m-%dT%H:%M:%S")
        L = datetime.datetime.strptime(last_date_iso, "%Y-%m-%dT%H:%M:%S")

        # Finding the days on which check_in is done
        reports = mongo.db.reports.find({
            "user": Id,
            "created_at": {
                "$gte": F,
                "$lte": L
            }
        })
        reports = [serialize_doc(report) for report in reports]

        # storing just the check-in dates from reports in no_of_checking list
        no_of_checking = list()
        for data in reports:
            no_of_checking.append(data['created_at'])

        # Taking the length of the list and store it in no_of_checking_days list
        list_checkin = no_of_checking
        no_of_checking_days = len(list_checkin)
        print('No of days checkin done' + ' :' + str(no_of_checking_days))

        # Calculating the overall_score for checkin of a user
        checkin_scr = no_of_checking_days / no_days_present * 100
        print('overall_score' + ' :' + str(checkin_scr))
        ret = mongo.db.users.update({
            "_id": ObjectId(Id)
        }, {
            "$set": {
                "Checkin_rating": checkin_scr,
            }
        })
    else:
        return 'Job done'

# Function for overall review of a user
def overall_reviewes():
    users = mongo.db.reports.find({"cron_checkin":True})
    users = [serialize_doc(doc) for doc in users]
    for detail in users:
        id=detail['user']
        print(id)
        docs = mongo.db.reports.update({
        "user":str(id)
        }, {
        "$set": {
           "cron_checkin": False
           }}, upsert=False)
        docs = mongo.db.reports.find({"user":str(id)})
        user = mongo.db.users.find_one({"_id":ObjectId(id)})
        weights = user['managers']
        all_weight=[]
        for weg in weights:
            weight = weg['weight']
            all_weight.append(weight)
        docs = [serialize_doc(doc) for doc in docs]
        all_sum=[]
        for detail in docs:
            review=detail['review']
            rating=review['rating']
            all_sum.append(rating)
        weighted_avg = np.average(all_sum, weights=all_weight)
        ret = mongo.db.users.update({
                "_id": ObjectId(id)
            }, {
                "$set": {
                    "Overall_rating":weighted_avg
                }
                })

# Function for reseting the cron values to FALSE
def update_croncheckin():
    docs = mongo.db.users.update({
        "cron_checkin": True
    }, {
        "$set": {
            "cron_checkin": False
        }}, upsert=False, multi=True)
        
    ret = mongo.db.reports.update({
        "cron_checkin": False
    }, {
        "$set": {
            "cron_checkin": True
        }}, upsert=False, multi=True)
        
        
#Function of recent_activity for checkin_missed and reviewed.
def recent_activity():
        # Here we find a common variable in report
        users = mongo.db.reports.find({"type": "daily"})
        users = [serialize_doc(doc) for doc in users]
        # find user id
        for detail in users:
            ID = detail['user']
            # update cron  variable True
            # find today,last_day,next_day date
            today = datetime.datetime.today()
            last_day = today - datetime.timedelta(1)

            date = today - datetime.timedelta(1)
            time = date.strftime("%Y-%m-%d")
            print(time)
            # find reports checkin by user_id
            reports = mongo.db.reports.find({
                "user": str(ID),
                "type": "daily",
                "created_at": {
                    "$gte": datetime.datetime(last_day.year, last_day.month, last_day.day),
                    "$lte": datetime.datetime(today.year, today.month, today.day)
                }
            })
            reports = [serialize_doc(report) for report in reports]
            # if checkin not found update date in user profile
            if not reports:
                ret = mongo.db.users.update({
                    "_id": ObjectId(ID)},
                    {"$push": {"missed_checkin_dates": {
                        "time": time,
                        "dates": today - datetime.timedelta(1)
                    }}})
        
        
def reviewed_activity():
    # First take date time where weekly report is to be dealt with
        today = datetime.date.today()
        last_sunday = today - datetime.timedelta(days=(today.weekday() + 1))
        last_monday = today - datetime.timedelta(days=(today.weekday() + 8))
        #find user by a common variable
        users = mongo.db.reports.find({"cron_recent_activity":False})
        users = [serialize_doc(doc) for doc in users]
        #find user id
        for detail in users:
            id=detail['user']
        #find in users for manager details 
        docs = mongo.db.users.find({
                    "_id": ObjectId(id)})            
        docs = [serialize_doc(doc) for doc in docs] 
        for data in docs:
            manage = data['managers']

        #find manager id
        for data in manage:
            ID_ = data['_id']
          # First find the users which have the manager id in it's document
        users = mongo.db.users.find({
                "managers": {
                    "$elemMatch": {"_id": str(ID_)}
                }
                })
        users = [serialize_doc(doc) for doc in users]
        # Make a list of User_id and then fetch all the users/juniors belong to that manager
        user_ids = []
        for user in users:
            user_ids.append(str(user['_id']))
        # Now find weekly reports of all those users_id in the above list whose report is not reviewd 
        for data in  user_ids:
            docs = mongo.db.reports.find({
                "user":str(data),
                "review": {'$exists': False},
                "created_at": {
                "$gte": datetime.datetime(last_monday.year, last_monday.month, last_monday.day),
                "$lte": datetime.datetime(last_sunday.year, last_sunday.month, last_sunday.day)
                    }  
            },{"user":1})
            docs = [serialize_doc(doc) for doc in docs]   
            # Append those user records whose not been reviewd in user_id list
            user_id = []
            for user in docs:
                user_id.append(ObjectId(user['user']))

            docs = mongo.db.users.find({
                 "_id": {"$in": user_id} 
                        },{"username":1})
            docs = [serialize_doc(doc) for doc in docs]       

            name_list = []
            for data in docs:
                name_list.append(data['username'])

            for junior_name in name_list:
                # Then if we find that data exist in user_id report than update the manager recent activity with a date and message
                if user_id is not None: 
                    ret = mongo.db.recent_activity.update({
                    "user": str(ID_),},
                    {"$set":{"recent_activity":{
                    "created_at": datetime.datetime.now(),
                    "Message":"Your have not reviewed your juniors" " "+  junior_name  +" " "weekly report"
                    }}},upsert=True)

    
